// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Unknown client.ts 1`] = `
"// 
// Generated by @himenon/openapi-typescript-code-generator
// 
// OpenApi : 3.1.0
// 
// License  : MIT
// 


export namespace Schemas {
    /** What is this? */
    export type Unknown = any;
}
export interface Parameter$getUnknown {
    /** Number Book ID */
    id: number;
}
export interface Response$getUnknown$Status$200 {
    \\"application/json\\": Schemas.Unknown;
}
export type ResponseContentType$getUnknown = keyof Response$getUnknown$Status$200;
export interface Params$getUnknown {
    parameter: Parameter$getUnknown;
}
export type HttpMethod = \\"GET\\" | \\"PUT\\" | \\"POST\\" | \\"DELETE\\" | \\"OPTIONS\\" | \\"HEAD\\" | \\"PATCH\\" | \\"TRACE\\";
export interface ObjectLike {
    [key: string]: any;
}
export interface QueryParameter {
    value: any;
    style?: \\"form\\" | \\"spaceDelimited\\" | \\"pipeDelimited\\" | \\"deepObject\\";
    explode: boolean;
}
export interface QueryParameters {
    [key: string]: QueryParameter;
}
export type SuccessResponses = Response$getUnknown$Status$200;
export namespace ErrorResponse {
    export type getUnknown = void;
}
export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(httpMethod: HttpMethod, url: string, headers: ObjectLike | any, requestBody: ObjectLike | any, queryParameters: QueryParameters | undefined, options?: RequestOption) => Promise<T>;
}
export class Client<RequestOption> {
    private baseUrl: string;
    constructor(private apiClient: ApiClient<RequestOption>, baseUrl: string) { this.baseUrl = baseUrl.replace(/\\\\/$/, \\"\\"); }
    public async getUnknown(params: Params$getUnknown, option?: RequestOption): Promise<Response$getUnknown$Status$200[\\"application/json\\"]> {
        const url = this.baseUrl + \`/get/unknown\`;
        const headers = {
            Accept: \\"application/json\\"
        };
        return this.apiClient.request(\\"GET\\", url, headers, undefined, undefined, option);
    }
}
"
`;
