// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Template Only api.test.domain 1`] = `
"// 
// Generated by @himenon/openapi-typescript-code-generator
// 
// OpenApi : 3.1.0
// 
// License  : MIT
// 


export type ResponseContentType$getIncludeLocalReference = keyof Response$getIncludeLocalReference$Status$200;
export interface Params$getIncludeLocalReference {
    parameter: Parameter$getIncludeLocalReference;
}
export type RequestContentType$getIncludeRemoteReference = keyof RequestBody$getIncludeRemoteReference;
export interface Params$getIncludeRemoteReference {
    parameter: Parameter$getIncludeRemoteReference;
    requestBody: RequestBody$getIncludeRemoteReference[\\"application/json\\"];
}
export type ResponseContentType$getFullRemoteReference = keyof Response$getFullRemoteReference$Status$200;
export interface Params$getFullRemoteReference {
    parameter: Parameter$getFullRemoteReference;
}
export type ResponseContentType$i$have$dot = keyof Response$i$have$dot$Status$200;
export type ResponseContentType$getReferenceItems = keyof Response$getReferenceItems$Status$200;
export type ResponseContentType$searchBook = keyof Response$searchBook$Status$200;
export interface Params$searchBook {
    parameter: Parameter$searchBook;
}
export type ResponseContentType$getBookById = keyof Response$getBookById$Status$200;
export interface Params$getBookById {
    parameter: Parameter$getBookById;
}
export type ResponseContentType$deleteBook = keyof Response$deleteBook$Status$200;
export interface Params$deleteBook {
    parameter: Parameter$deleteBook;
}
export type HttpMethod = \\"GET\\" | \\"PUT\\" | \\"POST\\" | \\"DELETE\\" | \\"OPTIONS\\" | \\"HEAD\\" | \\"PATCH\\" | \\"TRACE\\";
export interface ObjectLike {
    [key: string]: any;
}
export interface QueryParameter {
    value: any;
    style?: \\"form\\" | \\"spaceDelimited\\" | \\"pipeDelimited\\" | \\"deepObject\\";
    explode: boolean;
}
export interface QueryParameters {
    [key: string]: QueryParameter;
}
export type SuccessResponses = Response$getIncludeLocalReference$Status$200 | Response$getFullRemoteReference$Status$200 | Response$i$have$dot$Status$200 | Response$getReferenceItems$Status$200 | Response$searchBook$Status$200 | Response$getBookById$Status$200 | Response$deleteBook$Status$200;
export namespace ErrorResponse {
    export type getIncludeLocalReference = void;
    export type getIncludeRemoteReference = void;
    export type getFullRemoteReference = void;
    export type i$have$dot = void;
    export type getReferenceItems = void;
    export type searchBook = void;
    export type getBookById = void;
    export type deleteBook = void;
}
export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(httpMethod: HttpMethod, url: string, headers: ObjectLike | any, requestBody: ObjectLike | any, queryParameters: QueryParameters | undefined, options?: RequestOption) => Promise<T>;
}
export class Client<RequestOption> {
    private baseUrl: string;
    constructor(private apiClient: ApiClient<RequestOption>, baseUrl: string) { this.baseUrl = baseUrl.replace(/\\\\/$/, \\"\\"); }
    public async getIncludeLocalReference(params: Params$getIncludeLocalReference, option?: RequestOption): Promise<Response$getIncludeLocalReference$Status$200[\\"application/json\\"]> {
        const url = this.baseUrl + \`/get/IncludeLocalReference\`;
        const headers = {
            Accept: \\"application/json\\"
        };
        const queryParameters: QueryParameters = {
            StringQuery: { value: params.parameter.StringQuery, explode: false }
        };
        return this.apiClient.request(\\"GET\\", url, headers, undefined, queryParameters, option);
    }
    public async getIncludeRemoteReference(params: Params$getIncludeRemoteReference, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + \`/get/IncludeRemoteReference\`;
        const headers = {
            \\"Content-Type\\": \\"application/json\\"
        };
        const queryParameters: QueryParameters = {
            IncludeRemoteReference: { value: params.parameter.IncludeRemoteReference, explode: false }
        };
        return this.apiClient.request(\\"GET\\", url, headers, params.requestBody, queryParameters, option);
    }
    public async getFullRemoteReference(params: Params$getFullRemoteReference, option?: RequestOption): Promise<Response$getFullRemoteReference$Status$200[\\"application/json\\"]> {
        const url = this.baseUrl + \`/FullRemoteReference\`;
        const headers = {
            Accept: \\"application/json\\"
        };
        const queryParameters: QueryParameters = {
            FullRemoteReferenceQuery: { value: params.parameter.FullRemoteReferenceQuery, explode: false }
        };
        return this.apiClient.request(\\"GET\\", url, headers, undefined, queryParameters, option);
    }
    public async i$have$dot(option?: RequestOption): Promise<Response$i$have$dot$Status$200[\\"application/json\\"]> {
        const url = this.baseUrl + \`/i/have/dot\`;
        const headers = {
            Accept: \\"application/json\\"
        };
        return this.apiClient.request(\\"GET\\", url, headers, undefined, undefined, option);
    }
    public async getReferenceItems(option?: RequestOption): Promise<Response$getReferenceItems$Status$200[\\"application/json\\"]> {
        const url = this.baseUrl + \`/get/reference/items\`;
        const headers = {
            Accept: \\"application/json\\"
        };
        return this.apiClient.request(\\"GET\\", url, headers, undefined, undefined, option);
    }
    public async searchBook(params: Params$searchBook, option?: RequestOption): Promise<Response$searchBook$Status$200[\\"application/json\\"]> {
        const url = this.baseUrl + \`/get/search/\${params.parameter[\\"book.name\\"]}\`;
        const headers = {
            Accept: \\"application/json\\"
        };
        const queryParameters: QueryParameters = {
            \\"from.publishedAt\\": { value: params.parameter[\\"from.publishedAt\\"], explode: false }
        };
        return this.apiClient.request(\\"GET\\", url, headers, undefined, queryParameters, option);
    }
    public async getBookById(params: Params$getBookById, option?: RequestOption): Promise<Response$getBookById$Status$200[\\"application/json\\"]> {
        const url = this.baseUrl + \`/get/books/\${params.parameter.id}\`;
        const headers = {
            Accept: \\"application/json\\"
        };
        return this.apiClient.request(\\"GET\\", url, headers, undefined, undefined, option);
    }
    public async deleteBook(params: Params$deleteBook, option?: RequestOption): Promise<Response$deleteBook$Status$200[\\"application/json\\"]> {
        const url = this.baseUrl + \`/get/books/\${params.parameter.id}\`;
        const headers = {
            Accept: \\"application/json\\"
        };
        return this.apiClient.request(\\"DELETE\\", url, headers, undefined, undefined, option);
    }
}
"
`;

exports[`Template Only async-api.test.domain 1`] = `
"// 
// Generated by @himenon/openapi-typescript-code-generator
// 
// OpenApi : 3.1.0
// 
// License  : MIT
// 


export type ResponseContentType$getIncludeLocalReference = keyof Response$getIncludeLocalReference$Status$200;
export interface Params$getIncludeLocalReference {
    parameter: Parameter$getIncludeLocalReference;
}
export type RequestContentType$getIncludeRemoteReference = keyof RequestBody$getIncludeRemoteReference;
export interface Params$getIncludeRemoteReference {
    parameter: Parameter$getIncludeRemoteReference;
    requestBody: RequestBody$getIncludeRemoteReference[\\"application/json\\"];
}
export type ResponseContentType$getFullRemoteReference = keyof Response$getFullRemoteReference$Status$200;
export interface Params$getFullRemoteReference {
    parameter: Parameter$getFullRemoteReference;
}
export type ResponseContentType$i$have$dot = keyof Response$i$have$dot$Status$200;
export type ResponseContentType$getReferenceItems = keyof Response$getReferenceItems$Status$200;
export type ResponseContentType$searchBook = keyof Response$searchBook$Status$200;
export interface Params$searchBook {
    parameter: Parameter$searchBook;
}
export type ResponseContentType$getBookById = keyof Response$getBookById$Status$200;
export interface Params$getBookById {
    parameter: Parameter$getBookById;
}
export type ResponseContentType$deleteBook = keyof Response$deleteBook$Status$200;
export interface Params$deleteBook {
    parameter: Parameter$deleteBook;
}
export type HttpMethod = \\"GET\\" | \\"PUT\\" | \\"POST\\" | \\"DELETE\\" | \\"OPTIONS\\" | \\"HEAD\\" | \\"PATCH\\" | \\"TRACE\\";
export interface ObjectLike {
    [key: string]: any;
}
export interface QueryParameter {
    value: any;
    style?: \\"form\\" | \\"spaceDelimited\\" | \\"pipeDelimited\\" | \\"deepObject\\";
    explode: boolean;
}
export interface QueryParameters {
    [key: string]: QueryParameter;
}
export type SuccessResponses = Response$getIncludeLocalReference$Status$200 | Response$getFullRemoteReference$Status$200 | Response$i$have$dot$Status$200 | Response$getReferenceItems$Status$200 | Response$searchBook$Status$200 | Response$getBookById$Status$200 | Response$deleteBook$Status$200;
export namespace ErrorResponse {
    export type getIncludeLocalReference = void;
    export type getIncludeRemoteReference = void;
    export type getFullRemoteReference = void;
    export type i$have$dot = void;
    export type getReferenceItems = void;
    export type searchBook = void;
    export type getBookById = void;
    export type deleteBook = void;
}
export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(httpMethod: HttpMethod, url: string, headers: ObjectLike | any, requestBody: ObjectLike | any, queryParameters: QueryParameters | undefined, options?: RequestOption) => T;
}
export class Client<RequestOption> {
    private baseUrl: string;
    constructor(private apiClient: ApiClient<RequestOption>, baseUrl: string) { this.baseUrl = baseUrl.replace(/\\\\/$/, \\"\\"); }
    public getIncludeLocalReference(params: Params$getIncludeLocalReference, option?: RequestOption): Response$getIncludeLocalReference$Status$200[\\"application/json\\"] {
        const url = this.baseUrl + \`/get/IncludeLocalReference\`;
        const headers = {
            Accept: \\"application/json\\"
        };
        const queryParameters: QueryParameters = {
            StringQuery: { value: params.parameter.StringQuery, explode: false }
        };
        return this.apiClient.request(\\"GET\\", url, headers, undefined, queryParameters, option);
    }
    public getIncludeRemoteReference(params: Params$getIncludeRemoteReference, option?: RequestOption): void {
        const url = this.baseUrl + \`/get/IncludeRemoteReference\`;
        const headers = {
            \\"Content-Type\\": \\"application/json\\"
        };
        const queryParameters: QueryParameters = {
            IncludeRemoteReference: { value: params.parameter.IncludeRemoteReference, explode: false }
        };
        return this.apiClient.request(\\"GET\\", url, headers, params.requestBody, queryParameters, option);
    }
    public getFullRemoteReference(params: Params$getFullRemoteReference, option?: RequestOption): Response$getFullRemoteReference$Status$200[\\"application/json\\"] {
        const url = this.baseUrl + \`/FullRemoteReference\`;
        const headers = {
            Accept: \\"application/json\\"
        };
        const queryParameters: QueryParameters = {
            FullRemoteReferenceQuery: { value: params.parameter.FullRemoteReferenceQuery, explode: false }
        };
        return this.apiClient.request(\\"GET\\", url, headers, undefined, queryParameters, option);
    }
    public i$have$dot(option?: RequestOption): Response$i$have$dot$Status$200[\\"application/json\\"] {
        const url = this.baseUrl + \`/i/have/dot\`;
        const headers = {
            Accept: \\"application/json\\"
        };
        return this.apiClient.request(\\"GET\\", url, headers, undefined, undefined, option);
    }
    public getReferenceItems(option?: RequestOption): Response$getReferenceItems$Status$200[\\"application/json\\"] {
        const url = this.baseUrl + \`/get/reference/items\`;
        const headers = {
            Accept: \\"application/json\\"
        };
        return this.apiClient.request(\\"GET\\", url, headers, undefined, undefined, option);
    }
    public searchBook(params: Params$searchBook, option?: RequestOption): Response$searchBook$Status$200[\\"application/json\\"] {
        const url = this.baseUrl + \`/get/search/\${params.parameter[\\"book.name\\"]}\`;
        const headers = {
            Accept: \\"application/json\\"
        };
        const queryParameters: QueryParameters = {
            \\"from.publishedAt\\": { value: params.parameter[\\"from.publishedAt\\"], explode: false }
        };
        return this.apiClient.request(\\"GET\\", url, headers, undefined, queryParameters, option);
    }
    public getBookById(params: Params$getBookById, option?: RequestOption): Response$getBookById$Status$200[\\"application/json\\"] {
        const url = this.baseUrl + \`/get/books/\${params.parameter.id}\`;
        const headers = {
            Accept: \\"application/json\\"
        };
        return this.apiClient.request(\\"GET\\", url, headers, undefined, undefined, option);
    }
    public deleteBook(params: Params$deleteBook, option?: RequestOption): Response$deleteBook$Status$200[\\"application/json\\"] {
        const url = this.baseUrl + \`/get/books/\${params.parameter.id}\`;
        const headers = {
            Accept: \\"application/json\\"
        };
        return this.apiClient.request(\\"DELETE\\", url, headers, undefined, undefined, option);
    }
}
"
`;

exports[`Template Only infer.domain 1`] = `
"// 
// Generated by @himenon/openapi-typescript-code-generator
// 
// OpenApi : 3.1.0
// 
// License  : MIT
// 


export type HttpMethod = \\"GET\\" | \\"PUT\\" | \\"POST\\" | \\"DELETE\\" | \\"OPTIONS\\" | \\"HEAD\\" | \\"PATCH\\" | \\"TRACE\\";
export interface ObjectLike {
    [key: string]: any;
}
export interface QueryParameter {
    value: any;
    style?: \\"form\\" | \\"spaceDelimited\\" | \\"pipeDelimited\\" | \\"deepObject\\";
    explode: boolean;
}
export interface QueryParameters {
    [key: string]: QueryParameter;
}
export type SuccessResponses = void;
export namespace ErrorResponse { }
export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(httpMethod: HttpMethod, url: string, headers: ObjectLike | any, requestBody: ObjectLike | any, queryParameters: QueryParameters | undefined, options?: RequestOption) => T;
}
export class Client<RequestOption> {
    private baseUrl: string;
    constructor(private apiClient: ApiClient<RequestOption>, baseUrl: string) { this.baseUrl = baseUrl.replace(/\\\\/$/, \\"\\"); }
}
"
`;
