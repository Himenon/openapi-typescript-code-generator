// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Typedef only typedef-api.test.domain 1`] = `
"// 
// Generated by @himenon/openapi-typescript-code-generator
// 
// OpenApi : 3.1.0
// 
// License  : MIT
// 


export namespace Schemas {
    /** String Literal */
    export type StringType = string;
    export type StringHasEnumType = \\"a\\" | \\"A\\" | \\"b\\" | \\"B\\" | \\"c\\" | \\"C\\";
    export type StringDateType = string;
    export type StringDateTimeType = string;
    export type StringPasswordType = string;
    export type StringByteType = string;
    export type StringBinaryType = string;
    export type StringWithPatternType = string;
    /** Number Literal */
    export type NumberType = number;
    export type NumberHasEnumType = 1 | 2 | 3 | 100 | 123 | 0.1 | -0.1 | 0;
    export type NumberInt32Type = number;
    export type NumberInt64Type = number;
    export type NumberFloat = number;
    export type NumberDouble = number;
    /** Boolean Literal */
    export type BooleanType = boolean;
    export type ArrayStringType = string[];
    export type ArrayNumberType = number[];
    export type ArrayBooleanType = boolean[];
    export interface ObjectEmptyPropertiesType {
    }
    export interface ObjectHasPropertiesType {
        stringType?: string;
        numberType?: number;
        booleanType?: boolean;
        arrayType?: string;
        objectType?: {
            requiredStringType: string;
        };
    }
    export type OneOfType = string | number | {};
    export type AllOfType = {
        A?: string;
    } & {
        B?: string;
    };
    export type LocalRefStringType = Schemas.StringType;
    export type LocalRefNumberType = Schemas.NumberType;
    export type LocalRefBooleanType = Schemas.BooleanType;
    export type LocalRefArrayStringType = Schemas.BooleanType;
    export type LocalRefObjectHasPropertiesType = Schemas.ObjectHasPropertiesType;
    export interface LocalRefObjectProperties {
        stringType: Schemas.StringType;
        numberType: Schemas.NumberType;
        booleanType: Schemas.BooleanType;
        arrayType: Schemas.BooleanType;
        objectType: Schemas.ObjectHasPropertiesType;
    }
    export type LocalRefOneOfType = Schemas.StringType | Schemas.NumberType | Schemas.ObjectHasPropertiesType | Schemas.LocalRefObjectProperties;
    export type LocalRefAllOfType = Schemas.StringType & Schemas.NumberType & Schemas.ObjectHasPropertiesType & Schemas.LocalRefObjectProperties;
    export type LocalReferenceBeforeResolvedSchema1 = Schemas.UnresolvedTarget1;
    export type UnresolvedTarget1 = boolean;
    export type LocalReferenceBeforeResolvedSchema2 = Schemas.UnresolvedTarget2;
    export type UnresolvedTarget2 = Schemas.UnresolvedTarget3;
    export type UnresolvedTarget3 = number;
    export interface LocalReferenceBeforeResolvedSchema3 {
        unresolvedTarget4?: Schemas.UnresolvedTarget4;
    }
    export interface UnresolvedTarget4 {
        unresolvedTarget5?: Schemas.UnresolvedTarget5;
    }
    export type UnresolvedTarget5 = string;
    export type RemoteString = string;
    export type RemoteRefString = Schemas.RemoteString;
    export namespace Level1 {
        /** Level 1 */
        export type RemoteBoolean = boolean;
        export namespace Level2 {
            /** Level 2 */
            export type RemoteNumber = number;
            export namespace Level3 {
                /** Level 3 */
                export type RemoteArray = string[];
                export namespace Level4 {
                    /** Level 4 */
                    export interface RemoteObject {
                        A?: string;
                        B?: number;
                    }
                }
            }
        }
    }
    /** Level 1 */
    export type RemoteRefBoolean = Schemas.Level1.RemoteBoolean;
    /** Level 2 */
    export type RemoteRefNumber = Schemas.Level1.Level2.RemoteNumber;
    /** Level 3 */
    export type RemoteRefArray = Schemas.Level1.Level2.Level3.RemoteArray;
    /** Level 4 */
    export type RemoteRefObject = Schemas.Level1.Level2.Level3.Level4.RemoteObject;
    export namespace DirectRef {
        export type ForHeader = string;
        export interface ForResponse {
            forResponse?: string;
        }
        export type ForParameters = string;
        export interface ForRequestBody {
            a?: string;
        }
    }
    export namespace FullRemoteReference {
        export type ForParameters = string;
    }
    export interface Child {
        id: string;
        /** child name */
        name: string;
    }
    export interface Item {
        name: string;
        children: Child[];
    }
}
export namespace Headers {
    export type StringHeader = string;
    export type A = number;
    export namespace Level1 {
        export type B = string;
    }
    export type ReferenceOfHeaderToSchema = Schemas.DirectRef.ForHeader;
}
export namespace Responses {
    /**
     * Status Code 100
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/100
     */
    export namespace Continue { }
    /**
     * Status Code 101
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/101
     */
    export namespace SwitchingProtocol { }
    /** Type Reference - string */
    export namespace LocalReferenceStringDateTimeType {
        export interface Content {
            \\"application/json\\": Schemas.StringDateTimeType;
        }
    }
    /** Local Reference - object */
    export namespace LocalReferenceObjectType {
        export interface Content {
            \\"application/json\\": Schemas.ObjectHasPropertiesType;
        }
    }
    /** Response -> Schema */
    export namespace ReferenceOfResponseToSchema {
        export interface Content {
            \\"application/json\\": Schemas.DirectRef.ForResponse;
        }
    }
    /** response A definition */
    export namespace ResponseA {
        export interface Header {
            HeaderA: Headers.A;
            HeaderB: string;
        }
        export interface Content {
            \\"application/json\\": {
                /** responseA description */
                name?: \\"responseA\\";
            };
        }
    }
    export namespace Level1 {
        /** response B definition */
        export namespace ResponseB {
            export interface Content {
                \\"application/json\\": {
                    name?: \\"responseB\\";
                };
            }
        }
        export namespace Level2 {
            /** response C definition */
            export namespace ResponseC {
                export interface Content {
                    \\"application/json\\": {
                        name?: \\"responseC\\";
                    };
                }
            }
        }
    }
    export namespace ForPathItems {
        /** response A definition */
        export namespace FullRemoteReference {
            export interface Header {
                HeaderA: Headers.A;
                HeaderB: string;
            }
            export interface Content {
                \\"application/json\\": {
                    /** responseA description */
                    name?: \\"responseA\\";
                };
            }
        }
    }
}
export namespace Parameters {
    /** parameters.StringQueryParams */
    export type StringQueryParams = string;
    /** parameters.NumberQueryParams */
    export type NumberQueryParams = number;
    /** parameters.StringQueryParams */
    export type StringHeaderParams = string;
    export type A = number;
    export type RemoteReferenceA = Parameters.A;
    export namespace level1 {
        export type B = string;
    }
    export type RemoteReferenceB = Parameters.level1.B;
    /** parameters -> schemas */
    export type ReferenceOfParameterToSchema = Schemas.DirectRef.ForParameters;
    /** deepObject */
    export type DeepObjectParameter = {
        [key: string]: {
            gt?: string;
            gte?: string;
            lt?: string;
            lte?: string;
            any?: string | number | boolean;
        };
    };
}
export namespace RequestBodies {
    /** Request body string type */
    export namespace StringType {
        export interface Content {
            \\"application/json\\": string;
        }
    }
    /** Request body Local reference string type */
    export namespace LocalReferenceStringType {
        export interface Content {
            \\"application/json\\": Schemas.StringHasEnumType;
        }
    }
    /** requestBodies -> schemas */
    export namespace ReferenceOfRequestBodyToSchema {
        export interface Content {
            \\"application/json\\": Schemas.DirectRef.ForRequestBody;
        }
    }
    /** Remote Request body A */
    export namespace RequestBodyA {
        export interface Content {
            \\"application/json\\": {
                body?: string;
            };
        }
    }
    export namespace Level1 {
        /** Remote Request body B */
        export namespace RequestBodyB {
            export interface Content {
                \\"application/json\\": {
                    body?: string;
                };
            }
        }
        export namespace Level2 {
            /** Remote Request body C */
            export namespace RequestBodyC {
                export interface Content {
                    \\"application/json\\": {
                        body?: string;
                    };
                }
            }
        }
    }
}
"
`;

exports[`Typedef only typedef-infer.domain 1`] = `
"// 
// Generated by @himenon/openapi-typescript-code-generator
// 
// OpenApi : 3.1.0
// 
// License  : MIT
// 


export namespace Schemas {
    export type InferArrayEmptyItems = {}[];
    export type InferArrayType = string[];
    export interface InferObjectItem {
        description: any;
    }
    export interface InferObjectHasAnyProp {
        filed?: any;
    }
    export interface InferObject {
        filed?: string;
    }
    export type InferStringEnum = \\"a\\" | \\"b\\" | \\"c\\";
    export type InferAnyNullable = null;
}
"
`;
