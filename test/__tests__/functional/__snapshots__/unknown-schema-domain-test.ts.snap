// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Unknown client.ts 1`] = `
"// 
// Generated by @himenon/openapi-typescript-code-generator v0.27.1
// 
// OpenApi : 3.1.0
// 
// License  : MIT
// 


export namespace Schemas {
    /** What is this? */
    export type Unknown = any;
}
export interface Parameter$getUnknown {
    /** Number Book ID */
    id: number;
}
export interface Response$getUnknown$Status$200 {
    "application/json": Schemas.Unknown;
}
export type ResponseContentType$getUnknown = keyof Response$getUnknown$Status$200;
export interface Params$getUnknown {
    parameter: Parameter$getUnknown;
}
export type HttpMethod = "GET" | "PUT" | "POST" | "DELETE" | "OPTIONS" | "HEAD" | "PATCH" | "TRACE";
export interface ObjectLike {
    [key: string]: any;
}
export interface QueryParameter {
    value: any;
    style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
    explode: boolean;
}
export interface QueryParameters {
    [key: string]: QueryParameter;
}
export type SuccessResponses = Response$getUnknown$Status$200;
export namespace ErrorResponse {
    export type getUnknown = void;
}
export interface Encoding {
    readonly contentType?: string;
    headers?: Record<string, any>;
    readonly style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
    readonly explode?: boolean;
    readonly allowReserved?: boolean;
}
export interface RequestArgs {
    readonly httpMethod: HttpMethod;
    readonly url: string;
    headers: ObjectLike | any;
    requestBody?: ObjectLike | any;
    requestBodyEncoding?: Record<string, Encoding>;
    queryParameters?: QueryParameters | undefined;
}
export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(requestArgs: RequestArgs, options?: RequestOption) => Promise<T>;
}
export const createClient = <RequestOption>(apiClient: ApiClient<RequestOption>, baseUrl: string) => {
    const _baseUrl = baseUrl.replace(/\\/$/, "");
    return {
        getUnknown: (params: Params$getUnknown, option?: RequestOption): Promise<Response$getUnknown$Status$200["application/json"]> => {
            const url = _baseUrl + \`/get/unknown\`;
            const headers = {
                Accept: "application/json"
            };
            return apiClient.request({
                httpMethod: "GET",
                url,
                headers
            }, option);
        }
    };
};
type ClientFunction<RequestOption> = typeof createClient<RequestOption>;
export type Client<RequestOption> = ReturnType<ClientFunction<RequestOption>>;
"
`;
