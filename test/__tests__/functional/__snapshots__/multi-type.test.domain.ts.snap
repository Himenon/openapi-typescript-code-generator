// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Multi Type apiClient 1`] = `
"// 
// Generated by @himenon/openapi-typescript-code-generator
// 
// OpenApi : 3.0.1
// 
// License  : MIT
// 


import { Schemas } from "./types";
export interface RequestBody$putAnyOf {
    "application/json": Schemas.Cat | Schemas.Dog;
}
export interface RequestBody$patchOneOf {
    "application/json": Schemas.Cat | Schemas.Dog;
}
export type RequestContentType$putAnyOf = keyof RequestBody$putAnyOf;
export interface Params$putAnyOf {
    requestBody: RequestBody$putAnyOf["application/json"];
}
export type RequestContentType$patchOneOf = keyof RequestBody$patchOneOf;
export interface Params$patchOneOf {
    requestBody: RequestBody$patchOneOf["application/json"];
}
export type HttpMethod = "GET" | "PUT" | "POST" | "DELETE" | "OPTIONS" | "HEAD" | "PATCH" | "TRACE";
export interface ObjectLike {
    [key: string]: any;
}
export interface QueryParameter {
    value: any;
    style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
    explode: boolean;
}
export interface QueryParameters {
    [key: string]: QueryParameter;
}
export type SuccessResponses = void;
export namespace ErrorResponse {
    export type putAnyOf = void;
    export type patchOneOf = void;
}
export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(httpMethod: HttpMethod, url: string, headers: ObjectLike | any, requestBody: ObjectLike | any, queryParameters: QueryParameters | undefined, options?: RequestOption) => Promise<T>;
}
export const createClient = <RequestOption>(apiClient: ApiClient<RequestOption>, baseUrl: string) => {
    return {
        /**
         * operationId: putAnyOf
         * Request URI: /pets
         */
        putAnyOf: (params: Params$putAnyOf, option?: RequestOption): Promise<void> => {
            const url = baseUrl + \`/pets\`;
            const headers = {
                "Content-Type": "application/json"
            };
            return apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
        },
        /**
         * operationId: patchOneOf
         * Request URI: /pets
         */
        patchOneOf: (params: Params$patchOneOf, option?: RequestOption): Promise<void> => {
            const url = baseUrl + \`/pets\`;
            const headers = {
                "Content-Type": "application/json"
            };
            return apiClient.request("PATCH", url, headers, params.requestBody, undefined, option);
        }
    };
};
export type Client = ReturnType<typeof createClient>;
"
`;

exports[`Multi Type types 1`] = `
"// 
// Generated by @himenon/openapi-typescript-code-generator
// 
// OpenApi : 3.0.1
// 
// License  : MIT
// 


export namespace Schemas {
    export interface Pet {
        pet_type: string;
    }
    export type Dog = Schemas.Pet & {
        bark?: boolean;
        breed?: "Dingo" | "Husky" | "Retriever" | "Shepherd";
    };
    export type Cat = Schemas.Pet & {
        hunts?: boolean;
        age?: number;
    };
}
"
`;
