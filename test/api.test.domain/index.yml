openapi: 3.1.0
info:
  version: 1.0.0
  title: api.test.domain
  description: Library test schema
  license:
    name: MIT

servers:
  - url: "http://dev.api.test.domain/"
    description: Development Environment
  - url: "https://api.test.domain/"
    description: Production Environment

tags:
  - name: test

components:
  schemas:
    UserId:
      $ref: "./components/schemas/UserId.yml"
    User:
      $ref: "./components/schemas/User.yml"
    ResponseMeta:
      type: object
      required:
        - statusCode
      properties:
        statusCode:
          type: number
    Blog:
      type: object
      properties:
        title:
          type: string
          description: Blog Title
        authorId:
          $ref: "#/components/schemas/UserId"
    BlogId:
      $ref: "./components/schemas/BlogId.yml"
    Favorite:
      $ref: "./components/schemas/Favorite.yml"
    Archives:
      $ref: "./components/schemas/Archives.yml"
    IpAddress:
      type: string
  headers:
    Origin:
      required: true
      description: "request origin url"
      schema:
        type: string
        example: "https://example.com"
    Authorization:
      $ref: "./components/headers/Authorization.yml"
    IPAddress:
      required: true
      description: "Ip Address"
      schema:
        $ref: "#/components/schemas/IpAddress"
  responses:
    SucceededCreatingBlogPost:
      description: "Succeeded in creating a blog post"
      headers:
        X-Rate-Limit:
          description: The number of allowed requests in the current period
          schema:
            type: integer
      content:
        application/json:
          schema:
            type: object
            required:
              - meta
            properties:
              meta:
                $ref: "#/components/schemas/ResponseMeta"
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              meta:
                $ref: "#/components/schemas/ResponseMeta"
    FailedCreatingBlogPost:
      $ref: "./components/responses/FailedCreatingBlogPost.yml"
  parameters:
    BlogId:
      name: blogId
      in: path
      schema:
        type: number
        description: Blog Id
      required: true
  requestBodies:
    BlogPost:
      description: "BlogPost"
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: Blog title
              body:
                type: string
                description: Blog body
              tags:
                type: array
                items:
                  type: string
                  enum: [javascript, typescript, openapi]
    BlogDeleteReason:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              reason:
                type: string
  securitySchemes:
    UserSession:
      type: apiKey
      in: cookie
      name: sessionKey
      scheme: "http"
      openIdConnectUrl: ""
  pathItems:
    BlogCRUD:
      post:
        description: Create Blog
        summary: Create Blog
        operationId: createBlog
        responses:
          "200":
            $ref: "#/components/responses/SucceededCreatingBlogPost"
      delete:
        description: Delete Blog
        summary: Delete Blog
        operationId: deleteWithReason
        requestBody:
          $ref: "#/components/requestBodies/BlogDeleteReason"
        parameter:
          - in: path
            name: id
            schema:
              type: number
        responses:
          "401":
            $ref: "./components/responses/blog/AuthorizationError.yml"
    CategoryCRUD:
      $ref: "./components/pathItems/CategoryCRUD.yml"

paths:
  /blog:
    get:
      operationId: findBlog
      description: Search Blog
      parameters:
        - $ref: "#/components/parameters/BlogId"
      responses:
        "200":
          description: Found
        "404":
          description: Not found
    post:
      description: Summary Create Blog
      summary: Create Blog
      operationId: createBlog2
      requestBody:
        $ref: "#/components/requestBodies/BlogPost"
      responses:
        "200":
          $ref: "#/components/responses/SucceededCreatingBlogPost"
  /user/{username}/hoge/:
    get:
      description: user page
      operationId: getUser
      parameters:
        - in: path
          name: username
          schema:
            type: string
  /blog/{id}/delete/:
    $ref: "#/components/pathItems/BlogCRUD"
  /blog/{id}/:
    delete:
      description: Delete Blog
      summary: Delete Blog
      operationId: deleteBlog
      parameters:
        - in: path
          name: id
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "401":
          $ref: "./components/responses/blog/AuthorizationError.yml"
  /books/{bookId}/author/{authorId}/something:
    get:
      operationId: getBookAndAuthor
      description: search book and author
      parameters:
        - in: path
          name: bookId
          schema:
            type: number
        - in: path
          name: authorId
          schema:
            type: number
      responses:
        "200":
          description: result
          content:
            application/json:
              schema:
                type: object
                properties:
                  authorName:
                    type: string
  /multi/response:
    post:
      operationId: createMultiResponse
      description: Multi response test
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nameJson:
                  type: string
          application/xml:
            schema:
              type: object
              properties:
                nameXML:
                  type: string
      responses:
        "200":
          description: "Multiresponse"
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      status:
                        type: number
            application/xml:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      status:
                        type: number
